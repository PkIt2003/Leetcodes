<<JAVA && C++>>-->SOLUTIONS
----------------------------------------------
----------------------------------------------


//id 2778//

Sum of Squares of Special Elements 


class Solution {
    public int sumOfSquares(int[] nums) {
        int sum =0;
        for(int i=0; i<nums.length; i++){
            if(nums.length%(i+1)==0){
                sum += nums[i] * nums[i]; 
            }
        }
        return sum;
    }
}


---------------------------------------------------

//id-2769//

Find the Maximum Achievable Number

class Solution {
    public int theMaximumAchievableX(int num, int t) {
        int x=t;
        while(t>0){
            num = num+1;
            t=t-1;
            if(t==0){
                num =num+x;
            }
        }
        return num;
    } 

}

---------------------------------------------------

//id-2656//

 Maximum Sum With Exactly K Elements



class Solution {
    public int maximizeSum(int[] nums, int k) {
        int large=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]>large){
                large = nums[i];
            }
        }
        int sum = large;
        for(int i=k-1;i>0;i--){
            large++;
            sum =sum+large;
        }
        return sum;
    }
}

--------------------------------------------------------

//id-2652.// 

Sum Multiples


class Solution {
    public int sumOfMultiples(int n) {
        int sum=0;
        for(int i=1;i<=n;i++){
            if(i%3==0 || i%5==0 || i%7==0){
                sum = sum+i;
            }
        }
        return sum;
        
    }
}

-------------------------------------------------------

//id-2651.//

 Calculate Delayed Arrival Time



class Solution {
    public int findDelayedArrivalTime(int arrivalTime, int delayedTime) {
        int sum =arrivalTime+delayedTime;
        int tot=0;
        if(sum==24){
            tot =0;
        }
        else if(sum>24){
            tot =(arrivalTime+delayedTime)-24;
        }
        else if(sum<24){
            tot =sum;
        }
        return tot;
    }
}

---------------------------------------------------------

//id-2535.//

 Difference Between Element Sum and Digit Sum of an Array


class Solution {
    public int differenceOfSum(int[] nums) {
        int elementsum = 0;
        int digitsum = 0;
        for(int i=0;i<nums.length;i++){
            elementsum+=nums[i];
        }
        for(int j=0;j<nums.length;j++){
            if(nums[j]>9){
                while(nums[j]>0){
                    digitsum+=(nums[j]%10);
                    nums[j]=nums[j]/10;
                }
            }
            else{
                digitsum+=nums[j];
            }
        }
        return elementsum -digitsum;
    }
}


---------------------------------------------------------

//id-2469.// 

Convert the Temperature

class Solution {
    public double[] convertTemperature(double celsius) {
        double[] fina = new double[2];
        double kelvin =celsius + 273.15;
        double Fahren = (celsius*1.80)+32.00;
         fina[0]=kelvin;
         fina[1]=Fahren;
        return fina;
    }
}

--------------------------------------------------------

//id-2235.// 

Add Two Integers

class Solution {
    public int sum(int num1, int num2) {
        int sum;
        sum = num1+num2;
        return sum;
    }
}


--------------------------------------------------------

//id-2176.// 

Count Equal and Divisible Pairs in an Array

class Solution {
    public int countPairs(int[] nums, int k) {
        int count=0;
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<=(nums.length)-1;j++){
                    if(nums[i]==nums[j]){
                        if((i*j)%k==0){
                            count++;
                        }
                    }
            }

        }
        return count;
    }
}

---------------------------------------------------------

//id-2169.// 

Count Operations to Obtain Zero

class Solution {
    public int countOperations(int num1, int num2) {
        int ans = 0;
        while (num1 != 0 && num2 != 0) {
            if (num1 >= num2) {
                num1 -= num2;
            } else {
                num2 -= num1;
            }
            ++ans;
        }
        return ans;
    }
}

--------------------------------------------------------
//id-2006.// 

Count Number of Pairs With Absolute Difference K

class Solution {
    public int countKDifference(int[] nums, int k) {
        int count=0;
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<=(nums.length)-1;j++){
                if(Math.abs(nums[i]-nums[j])==k){
                    count++;
                }
            }
        }
        return count;
    }
}

-----------------------------------------------------------
//id-1920.// 

Build Array from Permutation

class Solution {
    public int[] buildArray(int[] nums) {
        int ans;
        int[] pernums = new int[nums.length];
        for(int i=0;i<nums.length;i++){
            ans =nums[i];
            pernums[i]=nums[ans]; 
        }
        return pernums;
    }
}

----------------------------------------------------------

//id-1486.// 

XOR Operation in an Array

class Solution {
    public int xorOperation(int n, int start) {
        int result=0;
        int nums[] =new int[n];
        for(int i=0;i<nums.length;i++){
            nums[i]=start+(2*i);
            result =result ^ nums[i];
        }    
        return result;

    }
}

------------------------------------------------------------
//id-1480.// 

Running Sum of 1d Array

class Solution {
    public int[] runningSum(int[] nums) {
        int len =nums.length;
        for(int i=1;i<=len-1;i++){
            nums[i]=nums[i]+nums[i-1];
        }
        return nums;

    }
}

-----------------------------------------------------------
//id-1342.// 

 Number of Steps to Reduce a Number to Zero

class Solution {
    public int numberOfSteps(int num) {
        int count=0;
        while(num>0){
            if(num%2==0){
                num = num/2;
                count++;
            }
            else if(num%2!=0){
                num =num-1;
                count++;
            }
        }
        return count;
    }
}

------------------------------------------------------------
//id-1295.// 

Find Numbers with Even Number of Digits

class Solution {
    public int findNumbers(int[] nums) {
        int n=0;
        for(int num:nums){
            int count=0;
            while(num>0){
                num=num/10;
                count++;
            }
            if(count%2==0) n++; 

        }
        return n;
    }
}

-------------------------------------------------------------
//id-1281.// 

Subtract the Product and Sum of Digits of an Integer

class Solution {
    public int subtractProductAndSum(int n) {
        int sum=0;
        int product=1;
        while(n>0){
            sum+=(n%10);
            product*=(n%10);
            n=n/10;
        }
        return product-sum;
    }
}

-----------------------------------------------------------

//id-771.// 

Jewels and Stones

class Solution {
    public int numJewelsInStones(String jewels, String stones) {
        int count=0;
        for(int i = 0; i < jewels.length(); i++){
            for(int j = 0; j < stones.length(); j++){
                if(jewels.charAt(i)==stones.charAt(j)){
                    count++;
                }
            }
        }
        return count;
    }
}

-----------------------------------------------------------
//id-709.// 

To Lower Case

class Solution {
    public String toLowerCase(String s) {
        String x =s.toLowerCase();
        return x;
    }
}

-----------------------------------------------------------
//id-412.// 

Fizz Buzz

class Solution {
    public List<String> fizzBuzz(int n) {
        List<String> list =new ArrayList<>();
        for(int i=1;i<=n;i++){
            if(i%3==0 && i%5==0){
                list.add("FizzBuzz");
            }
            else if(i%5==0){
                list.add("Buzz");
            }
            else if(i%3==0){
                list.add("Fizz");
            }
            else{
                String str =Integer.toString(i);
                list.add(str);
            }
        }
        return list;
        }
    }

-----------------------------------------------------------
//id-344.// 

Reverse String

class Solution {
    public void reverseString(char[] s) {
        int n=s.length;
           for(int i=0;i<n/2;i++)
           {
               char temp = s[i];
               s[i]=s[n-i-1];
               s[n-i-1]=temp;
           }
    }
} 

----------------------------------------------------------

//id-342.// 

Power of Four

class Solution {
    public boolean isPowerOfFour(int n) {
        double power = 0;
        double i=0;
        double b  = 4.0;
        boolean boo = false;
        while(power<=n){
            power = Math.pow(b,i);
            i++;
            if(power==n){
                boo = true;
                break;
            }
        }
        return boo;
    }
}

--------------------------------------------------------

//id-326.//

Power of Three

class Solution {
    public boolean isPowerOfThree(int n) {
        boolean boo=false;
        if(n==0||n<0){
          boo =false;   
        }
        else if(n==1){
            boo=true;
        }
        else{
        do{
            if(n%3==0){
                n=n/3;
                boo=true;
            }
            else if(n%3!=0){
                boo=false;
                break;
                
            }
        }while(n>1);
        }
        return boo;
    }
}

----------------------------------------------------------

//id-258.// 

Add Digits

class Solution {
    public int addDigits(int num) {
        int sum = 0;
        while(num>0){
            sum = num%10;
            num = num/10;
            sum +=num;
            if(sum>9){
                num =sum;
            }
            else{
                break;
            }
        }
        return sum;

    }
}

-------------------------------------------------------------
//id-231.// 

Power of Two

class Solution {
    public boolean isPowerOfTwo(int n) {
        for (int i=0;i<=31;i++){
            if (Math.pow(2,i) == n){
                return true;
            }
        }
        return false;
        
    }
}

---------------------------------------------------------------
//id-217.// 

Contains Duplicate

//C++ solution //


class Solution {
public:
    bool containsDuplicate(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i - 1])
                return true;
        }
        return false;
    }
};

--------------------------------------------------------------

//id-58.//

Length of Last Word


class Solution {
    public int lengthOfLastWord(String s) {
        int count = 0;
        boolean b = false;
        
        for(int i = s.length()-1;i>=0;i--){
            if(s.charAt(i) != ' '){
                b = true;
                count++;
            }else{
                if(b){
                    return count;
                    }
            }
        }
        return count;
    }
}

-----------------------------------------------------------------

//id-9.// 

Palindrome Number

class Solution {
    public boolean isPalindrome(int x) {
     String str = String.valueOf(x);
     String rstr="";
     int i;
     boolean boo=false;
     if(x==0){
         boo =true;
     }
     else if(x<0){
         boo=false;
     }
     else{
     while(x>0){
         i = x%10;
         rstr = rstr+(String.valueOf(i));
         x=x/10;
     }
     if(str.equals(rstr)==true){
         boo=true;
     }
     }
     return boo;  
    }
}

----------------------------------------------------------------
//id-1.// 

Two Sum

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] twoindices = new int[2];
        for(int i=0;i<nums.length;i++){
            for(int j =i+1;j<=(nums.length)-1;j++){
                if(nums[i]+nums[j]==target){
                    twoindices[0]=i;
                    twoindices[1]=j;
                }
            }
        }
        return twoindices;
    }
}

---------------------------------------------------------------
//id-2894//

Divisible and Non-divisible Sums Difference

class Solution {
    public int differenceOfSums(int n, int m) {
       int num1 = 0;
       int num2 = 0;
       for(int i=1;i<=n;i++){
           if(i%m!=0){
               num1 = num1+i;
           }
           else{
               num2 = num2+i;
           }
       }
       return num1-num2;
    }
}






